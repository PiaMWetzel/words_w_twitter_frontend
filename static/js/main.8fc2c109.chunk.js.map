{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","img","class_","imgdata","setImgdata","twitterhandle","setTwitterhandle","error_class","setError_class","hl_bird","setHl_bird","handleResponse","my_response","console","log","status","className","src","to","smooth","type","placeholder","value","onInput","event","target","onClick","a","fetch","method","headers","body","JSON","stringify","res","json","alt","id","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0RA+EeA,MA1Ef,WAAgB,IAAD,EACiBC,mBAAS,CAACC,IAAK,cAAcC,OAAQ,6BADtD,mBACNC,EADM,KACGC,EADH,OAE6BJ,mBAAS,IAFtC,mBAENK,EAFM,KAESC,EAFT,OAGyBN,mBAAS,QAHlC,mBAGNO,EAHM,KAGOC,EAHP,OAIiBR,mBAAS,QAJ1B,mBAINS,EAJM,KAIGC,EAJH,KAgBb,SAASC,EAAeC,GALxB,IAAqBX,EAOnBY,QAAQC,IAAI,aACZD,QAAQC,IAAIF,EAAW,QACE,KAAtBA,EAAYG,QATId,EAWLW,EAAW,MATzBR,EAAW,CAACH,IAAI,yBAA2BA,EAAKC,OASZ,iBAClCQ,EAAW,WACXG,QAAQC,IAAI,YAEgB,KAAtBF,EAAYG,SAElBP,EAAe,SACfJ,EAAW,CAACH,IAAK,cAAcC,OAAQ,8BAGzCI,EAAiB,IAIpB,OACG,sBAAKU,UAAU,MAAf,UACE,sBAAKA,UAAU,MAAf,UACA,qBAAKA,UAAaP,EAASQ,IAAI,gBAC/B,mBAAGD,UAAU,QAAb,qCAEA,cAAC,OAAD,CAAME,GAAG,SAASC,QAAQ,EAA1B,SACA,mBAAGH,UAAU,YAAb,4BAEA,uBAAOI,KAAK,OAAOC,YAAY,uBAAuBC,MAAOjB,EAAekB,QAvChF,SAAqBC,GAEnBlB,EAAiBkB,EAAMC,OAAOH,UAsC5B,wBAAQI,QAAO,sBAAI,8BAAAC,EAAA,6DACjBvB,EAAW,CAACH,IAAI,gBAAiBC,OAAO,gBACxCM,EAAe,QAFE,SAGCoB,MAAM,sDAAsDvB,EAChF,CACEwB,OAAQ,OACRC,QAAS,CAAC,eAAe,oBACzBC,KAAMC,KAAKC,cAPM,cAGXC,EAHW,gBASKA,EAAIC,OATT,OASfvB,EATe,OAUnBC,QAAQC,IAAIF,GACZD,EAAeC,GAXI,4CAAnB,uBAaF,qBAAKI,UAAWT,EAAhB,gFACE,8BACA,qBAAKS,UAAab,EAAQD,OAAQe,IAAKd,EAAQF,IAAKmC,IAAI,uBAGxD,sBAAKpB,UAAU,SAASqB,GAAG,SAA3B,UACE,8BAAG,qDAAH,qEACA,gHAAkF,uBAAlF,4EAAoK,mBAAGC,KAAK,sDAAsDb,OAAO,SAArE,0CC3D7Jc,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.8fc2c109.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport { Link, animateScroll as scroll } from \"react-scroll\";\nimport  './App_mobile.css';\nimport  './App.css';\n\nfunction App() {\n  const [imgdata, setImgdata] = useState({img: 'default.png',class_: 'response_img img_default'});\n  const [twitterhandle, setTwitterhandle] = useState('');\n  const [error_class, setError_class] = useState('hide');\n  const [hl_bird, setHl_bird] = useState('hide');\n\n  function handleInput(event)\n  {\n    setTwitterhandle(event.target.value);\n  }\n\n  function handleImage(img, class_)\n  {\n    setImgdata({img:'data:image/png;base64,' + img, class_:class_});\n  }\n\n  function handleResponse(my_response)\n  {\n    console.log(\"responses\");\n    console.log(my_response['status']);\n    if(my_response.status == 200)\n    {\n      handleImage(my_response['image'], 'response_img');\n      setHl_bird('top_img')\n      console.log(\"success\");\n    }\n    else if(my_response.status == 404)\n    {\n      setError_class('error');\n      setImgdata({img: 'default.png',class_: 'response_img img_default'});\n\n    }\n    setTwitterhandle('');\n  }\n\n\n return (\n    <div className=\"App\">\n      <div className=\"top\">\n      <img className = {hl_bird} src=\"default.png\"/>\n      <p className=\"title\">[Words] with Twitter</p>\n      </div>\n      <Link to=\"footer\" smooth={true}>\n      <p className=\"faq_label\">What's this?</p>\n      </Link>\n      <input type=\"text\" placeholder=\"Enter Twitter handle\" value={twitterhandle} onInput={handleInput} />\n      <button onClick = {async () => {\n        setImgdata({img:'./loading.gif', class_:'loading_gif'});\n        setError_class('hide');\n        const res = await fetch('https://words-w-twitter-backend.herokuapp.com//sub/'+twitterhandle,\n      {\n        method: 'POST',\n        headers: {'content-type':'application/json'},\n        body: JSON.stringify()\n      })\n      let my_response = await res.json();\n      console.log(my_response);\n      handleResponse(my_response);\n    }}>Get words</button>\n    <div className={error_class}>Error: Unable to find handle. Please check spelling and try again.</div>\n      <div>\n      <img className = {imgdata.class_} src={imgdata.img} alt=\"Word Frequencies\" />\n      </div>\n\n      <div className=\"footer\" id=\"footer\">\n        <p><b>[Words] with Twitter</b> displays a user's 10 most frequently used words or word stems.</p>\n        <p>200 of the user's most recent tweets are retrieved. Retweets are subtracted and<br></br> stopwords like ['the', 'these', 'a', ...] are removed. Stemming method: <a href=\"https://www.geeksforgeeks.org/snowball-stemmer-nlp/\" target=\"_blank\">Snowball stemming.</a></p>\n\n      </div>\n    </div>\n  );\n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}